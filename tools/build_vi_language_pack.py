import csv
import json
import os
from pathlib import Path
from collections import defaultdict

HEADER_BANNER = [
    "--------------------------------------------------------------------------------------------",
    "Copyright (c) Microsoft Corporation. All rights reserved.",
    "Licensed under the MIT License. See License.txt in the project root for license information.",
    "--------------------------------------------------------------------------------------------",
    "Do not edit this file. It is machine generated.",
]

# Map CSV file name to output json relative path and id used in package.json translations list
# - main.i18n.csv -> translations/main.i18n.json, id "vscode"
# - others (like vscode.python.i18n.csv) -> translations/extensions/<same>.json, id is stem before .i18n

def output_info_for_csv(csv_path: Path):
    name = csv_path.name
    if name == "main.i18n.csv":
        rel = Path("translations") / "main.i18n.json"
        trans_id = "vscode"
    else:
        stem = name[:-4]  # remove .csv
        json_name = stem + ".json"
        rel = Path("translations") / "extensions" / json_name
        # remove trailing .i18n from id
        id_part = stem
        if id_part.endswith(".i18n"):
            id_part = id_part[:-6]
        trans_id = id_part
    return rel, trans_id


def read_csv_rows(csv_file: Path):
    with csv_file.open("r", encoding="utf-8", newline="") as f:
        reader = csv.DictReader(f)
        for row in reader:
            yield row


def build_json_from_csv(csv_file: Path) -> dict:
    contents = defaultdict(dict)
    have_any = False
    for row in read_csv_rows(csv_file):
        file_col = row.get("file", "")  # not used to route; we route by csv file name
        scope = row.get("scope") or "package"
        key = row.get("key", "")
        val = row.get("value_zh", "")  # we already wrote Vietnamese into value_zh
        if not key:
            continue
        have_any = True
        contents[scope][key] = val
    if not have_any:
        return {}
    return {
        "": HEADER_BANNER,
        "version": "1.0.0",
        "contents": contents,
    }


def write_json(dest_path: Path, data: dict):
    dest_path.parent.mkdir(parents=True, exist_ok=True)
    with dest_path.open("w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, separators=(",", ":"))


def generate_package_json(template_pkg: Path, out_pkg: Path, translations_map):
    # Build a minimal package.json similar to template, but for vi
    if template_pkg.exists():
        try:
            template = json.loads(template_pkg.read_text(encoding="utf-8"))
        except Exception:
            template = {}
    else:
        template = {}

    version = template.get("version", "1.0.0")
    engines = template.get("engines", {"vscode": "^1.0.0"})

    translations = []
    for trans_id, rel_path in sorted(translations_map.items()):
        translations.append({"id": trans_id, "path": f"./{rel_path.as_posix()}"})

    pkg = {
        "name": "vscode-language-pack-vi",
        "displayName": "Vietnamese (Tiếng Việt) Language Pack for Visual Studio Code",
        "description": "Language pack extension for Vietnamese",
        "version": version,
        "publisher": "local",
        "repository": template.get("repository", {"type": "git", "url": "https://github.com/microsoft/vscode-loc"}),
        "license": template.get("license", "SEE MIT LICENSE IN LICENSE.md"),
        "engines": engines,
        "icon": "languagepack.png",
        "categories": ["Language Packs"],
        "keywords": ["Tiếng Việt", "Vietnamese"],
        "contributes": {
            "localizations": [
                {
                    "languageId": "vi",
                    "languageName": "Vietnamese",
                    "localizedLanguageName": "Tiếng Việt",
                    "translations": translations,
                }
            ]
        }
    }

    out_pkg.write_text(json.dumps(pkg, ensure_ascii=False, indent=2), encoding="utf-8")


def copy_static_assets(template_ext_dir: Path, out_ext_dir: Path):
    # Copy icon and license/readme if available
    for name in ["languagepack.png", "LICENSE.md", "ThirdPartyNotices.txt", "readme.md", "changelog.md", "telemetry.json"]:
        src = template_ext_dir / name
        if src.exists():
            dst = out_ext_dir / name
            dst.parent.mkdir(parents=True, exist_ok=True)
            dst.write_bytes(src.read_bytes())


def main():
    import argparse
    parser = argparse.ArgumentParser(description="Build Vietnamese VS Code language pack from CSVs")
    parser.add_argument("--csv-dir", required=True, help="Directory of input CSV files")
    parser.add_argument("--template-ext", required=True, help="Path to extracted template extension dir (e.g., work/zh_template/extension)")
    parser.add_argument("--out-dir", required=True, help="Output extension dir (will be created)")
    args = parser.parse_args()

    csv_dir = Path(args.csv_dir)
    template_ext = Path(args.template_ext)
    out_ext = Path(args.out_dir)

    # Prepare output directories
    (out_ext / "translations" / "extensions").mkdir(parents=True, exist_ok=True)

    translations_map = {}  # id -> rel path

    for csv_file in sorted(csv_dir.glob("*.csv")):
        rel_path, trans_id = output_info_for_csv(csv_file)
        data = build_json_from_csv(csv_file)
        if not data:
            continue
        write_json(out_ext / rel_path, data)
        translations_map[trans_id] = rel_path

    # package.json
    generate_package_json(template_ext / "package.json", out_ext / "package.json", translations_map)

    # copy static assets
    copy_static_assets(template_ext, out_ext)

    print(f"Wrote {len(translations_map)} translation files to {out_ext}")


if __name__ == "__main__":
    main()
